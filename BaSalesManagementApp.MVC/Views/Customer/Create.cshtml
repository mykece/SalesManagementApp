@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer
@model BaSalesManagementApp.MVC.Models.CustomerVMs.CustomerCreateVM

@{
    ViewData["Title"] = localizer["Create"];
}

<link href="~/assets/flags/flags.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/css/intlTelInput.min.css" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css" rel="stylesheet" />

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="py-3 mb-4">
            <span class="text-muted fw-light">@Html.Raw(localizer["Customer"]) /</span> @Html.Raw(localizer["Create"])
        </h4>
        <div class="row">

            <div class="col-md-6 col-lg-6"> <!-- Formu genişliğe göre ayarlıyoruz -->
                <div class="card mb-4">
                    <div class="card-body">
                        <form asp-action="Create">
                            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                            <div class="mb-3">
                                <label asp-for="Name" class="form-label">@Html.Raw(localizer["CustomerName"]).ToString().ToUpper(new System.Globalization.CultureInfo(System.Threading.Thread.CurrentThread.CurrentCulture.Name))</label>
                                <input asp-for="Name" class="form-control" />
                                <span asp-validation-for="Name" class="text-danger"></span>
                            </div>
           
                            <div class="mb-3">
                                <label asp-for="CountryId" class="form-label">@Html.Raw(localizer["Country"])</label>
                                <select asp-for="CountryId" class="form-control" id="CountryId" style="width: 100%;"><!-- Genişlik ayarı -->
                                    @if (Model != null && Model.Countries != null && Model.Countries.Any())
                                    {
                                        <option value="">@Html.Raw(localizer["SelectCountry"])</option>
                                        foreach (var country in Model.Countries)
                                        {
                                            <option value="@country.Id">@country.Name</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="" disabled selected>@Html.Raw(localizer["NoCountryFound"])</option>
                                    }
                                </select>
                                <span asp-validation-for="CountryId" class="text-danger"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="CityId" class="form-label">@Html.Raw(localizer["City"])</label>
                                <select asp-for="CityId" class="form-control" id="CityId" style="width: 100%;"><!-- Genişlik ayarı -->
                                    @if (Model != null && Model.Cities != null && Model.Cities.Any())
                                    {
                                        <option value="">@Html.Raw(localizer["SelectCity"])</option>
                                        foreach (var city in Model.Cities)
                                        {
                                            <option value="@city.Id">@city.Name</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="" disabled selected>@Html.Raw(localizer["NoCityFound"])</option>
                                    }
                                </select>
                                <span asp-validation-for="CityId" class="text-danger"></span>
                            </div>

                            <div class="mb-3">
                                <label asp-for="Address" class="form-label">@Html.Raw(localizer["Address"])</label>
                                <input asp-for="Address" class="form-control" />
                                <span asp-validation-for="Address" class="text-danger"></span>
                            </div>

                           
                                <div class="mb-3">
                                    <label asp-for="Phone" class="form-label">@Html.Raw(localizer["Phone"])</label>
                                    <br />
                                    <input asp-for="Phone" type="tel" class="form-control" id="phoneInput" autocomplete="tel" />
                                    <span asp-validation-for="Phone" class="text-danger"></span>
                                    <input type="hidden" id="fullPhoneNumber" name="fullPhoneNumber" />
                                    <input type="hidden" id="selectedCountryIso2" name="selectedCountryIso2" />
                                </div>

                            <div class="mb-3">
                                <label asp-for="CompanyId" class="form-label">@Html.Raw(localizer["Company"])</label>
                                <select asp-for="CompanyId" class="form-control">
                                    @if (Model != null && Model.Companies != null && Model.Companies.Any())
                                    {
                                        <option value="">@Html.Raw(localizer["SelectCompany"])</option>
                                        foreach (var company in Model.Companies)
                                        {
                                            <option value="@company.Id">@company.Name</option>
                                        }
                                    }
                                    else
                                    {
                                        <option value="" disabled selected>@Html.Raw(localizer["NoCompanyFound"])</option>
                                    }
                                </select>
                                <span asp-validation-for="CompanyId" class="text-danger"></span>
                            </div>

                            <div>
                                <input type="submit" value="@Html.Raw(localizer["Create"])" class="btn btn-primary" />
                                <a asp-action="Index" class="btn btn-secondary">@Html.Raw(localizer["BackToList"])</a>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@section Scripts {
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

<!-- Toastr JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
<!-- intl-tel-input JS -->
 
<script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/intlTelInput.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>

<script>
    $(document).ready(function () {
        var phoneInput = $('#phoneInput');
        var iti = intlTelInput(phoneInput[0], {
            separateDialCode: true,
            initialCountry: 'auto',
            utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/17.0.8/js/utils.js"
        });

        // Toastr ayarları: Sağ alt köşede göster
        toastr.options = {
            "closeButton": true,
            "debug": false,
            "newestOnTop": true,
            "progressBar": true,
            "positionClass": "toast-bottom-right",  // Sağ alt köşe
            "preventDuplicates": true,
            "onclick": null,
            "showDuration": "300",
            "hideDuration": "1000",
            "timeOut": "5000",
            "extendedTimeOut": "1000",
            "showEasing": "swing",
            "hideEasing": "linear",
            "showMethod": "fadeIn",
            "hideMethod": "fadeOut"
        };

        // JSON dosyasından dinamik ülke ve telefon kodlarını çekmek
        var countryPhoneData;

        $.getJSON('/data/Countries.json', function(data) { // JSON dosyasını yüklüyoruz
            countryPhoneData = data.CountryCodes;
        });

        // Ülke seçildiğinde JSON'dan telefon kodunu bul ve uygula
        $('#CountryId').change(function () {
            var selectedCountryName = $(this).find('option:selected').text(); // Seçilen ülke adını al
            var selectedCountryPhoneCode = null;

            // Türkçe veya İngilizce ülke adına göre JSON'dan telefon kodunu bul
            $.each(countryPhoneData, function(index, country) {
                if (country.name === selectedCountryName || country.turkish_name === selectedCountryName) {
                    selectedCountryPhoneCode = country.dialcode;
                    return false; // Döngüyü durdur
                }
            });

            if (selectedCountryPhoneCode) {
                iti.setNumber(selectedCountryPhoneCode); // intl-tel-input ile telefon kodunu ayarlıyoruz
            } else {
                toastr.error('@localizer["ThePhoneNumberIsNotValidInInternationalFormat."].Value');
            }
        });

        // Form submit sırasında doğrulama ve hata mesajlarını gösterme
        $('form').on('submit', function (e) {
            var isValid = iti.isValidNumber();
            const countryData = iti.getSelectedCountryData();
            let phoneNumber = iti.getNumber();  // intl-tel-input ile formatlanmış numarayı alın

            if (!isValid) {
                e.preventDefault();
                toastr.error('@localizer["PleaseEnterAValidPhoneNumber."].Value');
                return;
            }

            $('#fullPhoneNumber').val(phoneNumber);  // Formatlanmış numarayı saklayın
            $('#selectedCountryIso2').val(countryData.iso2);
        });

        $('#CityId').select2({
            placeholder: '@Html.Raw(localizer["SelectCity"])',
            allowClear: true,
            matcher: function (params, data) {
                // Arama terimi yoksa, mevcut seçenekleri göster
                if ($.trim(params.term) === '') {
                    return data;
                }

                // Veri boşsa, eşleşme yok demektir
                if (typeof data.text === 'undefined') {
                    return null;
                }

                // Arama terimini küçük harflere çevir ve baştan eşleşme kontrolü yap
                var searchTerm = params.term.toLowerCase();
                var optionText = data.text.toLowerCase();

                // Eğer seçenek, arama terimiyle başlıyorsa, sonucu döndür
                if (optionText.indexOf(searchTerm) === 0) {
                    return data;
                }

                // Aksi takdirde eşleşme yok
                return null;
            },
            sorter: function (data) {
                // Alfabetik sıralama
                return data.sort(function (a, b) {
                    return a.text.localeCompare(b.text);
                });
            }
        });

        $('#CountryId').select2({
            placeholder: '@Html.Raw(localizer["SelectCountry"])',
            allowClear: true,
            width: 'resolve', // width: 'resolve' ekleyerek genişlik sorununu çözdük.
            matcher: function (params, data) {
                // Arama terimi yoksa, mevcut seçenekleri göster
                if ($.trim(params.term) === '') {
                    return data;
                }

                // Veri boşsa, eşleşme yok demektir
                if (typeof data.text === 'undefined') {
                    return null;
                }

                // Arama terimini küçük harflere çevir ve baştan eşleşme kontrolü yap
                var searchTerm = params.term.toLowerCase();
                var optionText = data.text.toLowerCase();

                // Eğer seçenek, arama terimiyle başlıyorsa, sonucu döndür
                if (optionText.indexOf(searchTerm) === 0) {
                    return data;
                }

                // Aksi takdirde eşleşme yok
                return null;
            },
            sorter: function (data) {
                // Alfabetik sıralama
                return data.sort(function (a, b) {
                    return a.text.localeCompare(b.text);
                });
            }
        });
    });
</script>

<!-- Ülke seçildiğinde şehirleri yükleyen AJAX -->
<script>
    $(document).ready(function () {
        $('#CountryId').change(function () {
            var countryId = $(this).val();
            if (countryId) {
                $.ajax({
                    url: '@Url.Action("GetCitiesByCountryId", "Customer")',
                    type: 'GET',
                    data: { countryId: countryId },
                    success: function (data) {
                        var citySelect = $('#CityId');
                        citySelect.empty(); // Mevcut şehir listesini temizle.
                        citySelect.append('<option value="">@localizer["SelectCity"]</option>');

                        // Şehirleri dropdown'a ekle
                        $.each(data, function (index, city) {
                            citySelect.append('<option value="' + city.id + '">' + city.name + '</option>');
                        });
                    },
                    error: function () {
                        toastr.error('@localizer["Error fetching cities."]', 'Hata');
                    }
                });
            } else {
                $('#CityId').empty().append('<option value="">@localizer["SelectCity"]</option>');
            }
        });
    });
</script>

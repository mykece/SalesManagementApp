@model BaSalesManagementApp.MVC.Models.StockVMs.StockCreateVM

@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer

@{
    ViewData["Title"] = localizer["Create"];
}

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="py-3 mb-4">
            <span class="text-muted fw-light">@localizer["Stock"] /</span>
            @localizer["Create"]
        </h4>
        <div class="row">
            
                <div class="col-md-6">
                    <div class="card mb-4">
                        <div class="card-body">
                            <form asp-action="Create">
                                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                                <div class="mb-3">
                                    <label asp-for="ProductId" class="form-label">@localizer["Product_Name"]</label>
                                <select asp-for="ProductId" class="form-control" id="productSelect" style="width: 100%;"><!-- Genişlik ayarı -->>

                                        <option value="">@localizer["Select_a_Product"]</option>
                                            @foreach (var product in Model.Products)
                                            {
                                                <option value="@product.Id">@product.Name</option>
                                            }
                                        
                                    </select>
                                    <span  class="text-danger" id="productError"></span>
                                </div>
                                    <div class="mb-3">
                                        <label asp-for="Count" class="control-label">@localizer["Count"]</label>
                                        <input asp-for="Count" class="form-control" />
                                        <span asp-validation-for="Count" class="text-danger"></span>
                                    </div>
                                
                                <div>
                                    <input type="submit" value="@localizer["Create"]" class="btn btn-primary" />
                                    <a asp-action="Index" class="btn btn-secondary">@localizer["BackToList"]</a>
                                </div>
                            </form>

                        </div>

                    </div>
                </div>
            
        </div>

    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const form = document.querySelector('form');
            const productSelect = document.getElementById('productSelect');
            const productError = document.getElementById('productError');

            const productSelectionMessage = '@Html.Raw(localizer["STOCK_PRODUCT_RELATION"])';

            form.addEventListener('submit', function (event) {
                let isValid = true;

                // Kategori kontrolü
                if (!productSelect.value) {
                    productError.textContent = productSelectionMessage;
                    isValid = false;
                } else {
                    productError.textContent = '';
                }

                // Formu durdur eğer geçerli değilse
                if (!isValid) {
                    event.preventDefault();
                }

               
            });
        });
    </script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

    <script>

        $(document).ready(function () {
            $('#productSelect').select2({
                placeholder: "@Html.Raw(localizer["Select_a_Product"])",
                allowClear: true,
                matcher: function (params, data) {
                    
                    if ($.trim(params.term) === '') {
                        return data;
                    }

                    
                    if (typeof data.text === 'undefined') {
                        return null;
                    }

                    
                    var searchTerm = params.term.toLowerCase();
                    var optionText = data.text.toLowerCase();

                    
                    if (optionText.startsWith(searchTerm)) {
                        return data;
                    }

                    
                    return null;
                },
                sorter: function (data) {
                    
                    return data.sort(function (a, b) {
                        return a.text.localeCompare(b.text);
                    });
                }
            });
        });


    </script>
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}

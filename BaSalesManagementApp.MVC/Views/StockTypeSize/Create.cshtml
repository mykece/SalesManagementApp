@model StockTypeSizeCreateVM

@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer

@{
    ViewData["Title"] = localizer["Create"];
}

<div class="content-wrapper">
    <div class="container-xxl flex-grow-1 container-p-y">
        <h4 class="py-3 mb-4">
            <span class="text-muted fw-light">@localizer["StockTypeSize"] /</span>
            @localizer["Create"]
        </h4>
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-body">
                    <form asp-action="Create">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>

                        <!-- Size Input -->
                        <div class="mb-3">
                            <label asp-for="Size" class="form-label">@localizer["Size"]</label>
                            <input asp-for="Size" class="form-control" id="sizeText" />
                            <span class="text-danger" id="sizeError"></span> <!-- id="sizeError" olarak değiştirdim -->
                        </div>

                        <!-- Description Input -->
                        <div class="mb-3">
                            <label asp-for="Description" class="form-label">@localizer["Description"]</label>
                            <input asp-for="Description" class="form-control" id="descriptionText" />
                            <span class="text-danger" id="descriptionError"></span> <!-- id="descriptionError" olarak değiştirdim -->
                        </div>

                        <!-- Category Select -->
                        <div class="mb-3">
                            <label asp-for="CategoryId" class="form-label">@localizer["Category"].ToString().ToUpper(new System.Globalization.CultureInfo("tr-TR"))</label>
                            <select asp-for="CategoryId" class="form-control" id="categorySelect" style="width: 100%">
                                <option value="">@localizer["Select_Category"]</option>
                                @foreach (var category in Model.Categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </select>
                        </div>
                        <span class="text-danger" id="categoryError"></span> <!-- id="categoryError" olarak doğru şekilde kullandım -->

                        <div>
                            <input type="submit" value="@localizer["Create"]" class="btn btn-primary" />
                            <a asp-action="Index" class="btn btn-secondary">@localizer["BackToList"]</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>
</div>

@section Scripts {
    @{
            <script src="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/js/select2.min.js"></script>

        <script>
            $('#categorySelect').select2({
                placeholder: "@localizer["Select_Category"]",
                allowClear: true,
                matcher: function (params, data) {
                    // Arama terimi yoksa, mevcut seçenekleri göster
                    if ($.trim(params.term) === '') {
                        return data;
                    }

                    // Veri boşsa, eşleşme yok demektir
                    if (typeof data.text === 'undefined') {
                        return null;
                    }

                    // Arama terimini küçük harflere çevir ve baştan eşleşme kontrolü yap
                    var searchTerm = params.term.toLowerCase();
                    var optionText = data.text.toLowerCase();

                    // Eğer seçenek, arama terimiyle başlıyorsa, sonucu döndür
                    if (optionText.indexOf(searchTerm) === 0) {
                        return data;
                    }

                    // Aksi takdirde eşleşme yok
                    return null;
                },
                sorter: function (data) {
                    // Alfabetik sıralama
                    return data.sort(function (a, b) {
                        return a.text.localeCompare(b.text);
                    });
                }
            });

            document.addEventListener('DOMContentLoaded', function () {
                const form = document.querySelector('form');
                const categorySelect = document.getElementById('categorySelect');
                const categoryError = document.getElementById('categoryError');
                const sizeText = document.getElementById('sizeText');
                const sizeError = document.getElementById('sizeError');
                const descriptionText = document.getElementById('descriptionText');
                const descriptionError = document.getElementById('descriptionError');

                const notEmptyMessage = '@Html.Raw(localizer["STOCK_TYPE_SIZE_NOT_EMPTY"])';
            const maxLengthMessage = '@Html.Raw(localizer["STOCK_TYPE_SIZE_MAX_LENGTH"])';
                const stockTypeSizeCategoryRelationMessage = '@Html.Raw(localizer["STOCK_TYPE_SIZE_CATEGORY_RELATION"])';

                form.addEventListener('submit', function (event) {
                    let isValid = true;

                    // Kategori kontrolü
                    if (!categorySelect.value) {
                        categoryError.textContent = stockTypeSizeCategoryRelationMessage;
                        isValid = false;
                    } else {
                        categoryError.textContent = '';
                    }

                    // Size kontrolü
                    if (!sizeText.value.trim()) {
                        sizeError.textContent = notEmptyMessage;
                        isValid = false;
                    } else if (sizeText.value.length > 128) {
                        sizeError.textContent = maxLengthMessage;
                        isValid = false;
                    } else {
                        sizeError.textContent = '';
                    }

                    // Description kontrolü
                    if (!descriptionText.value.trim()) {
                        descriptionError.textContent = notEmptyMessage;
                        isValid = false;
                    } else if (descriptionText.value.length > 128) {
                        descriptionError.textContent = maxLengthMessage;
                        isValid = false;
                    } else {
                        descriptionError.textContent = '';
                    }

                    // Formu durdur eğer geçerli değilse
                    if (!isValid) {
                        event.preventDefault();
                    }

                    // Input eventleri ekleyerek mesajların temizlenmesi
                    categorySelect.addEventListener('change', function () {
                        if (categorySelect.value) {
                            categoryError.textContent = '';
                        }
                    });

                    sizeText.addEventListener('input', function () {
                        if (sizeText.value.trim() && sizeText.value.length <= 128) {
                            sizeError.textContent = '';
                        }
                    });

                    descriptionText.addEventListener('input', function () {
                        if (descriptionText.value.trim() && descriptionText.value.length <= 128) {
                            descriptionError.textContent = '';
                        }
                    });
                });
            });
        </script>

    }

    @{

        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
